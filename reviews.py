# -*- coding: utf-8 -*-
"""reviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/192_X9SgYh1SM3mHaAqiN3Ho8qMA__7zk
"""

!pip install -qq google-play-scraper

!pip install -qq -U watermark

# Commented out IPython magic to ensure Python compatibility.
#for apps logos(if required)
# %reload_ext watermark
# %watermark -v -p pandas,matplotlib,seaborn,google_play_scraper

# Commented out IPython magic to ensure Python compatibility.
import json
import pandas as pd
from tqdm import tqdm

import seaborn as sns
import matplotlib.pyplot as plt
#Python package to highlight code snippets.
from pygments import highlight
from pygments.lexers import JsonLexer
from pygments.formatters import TerminalFormatter

from google_play_scraper import Sort, reviews, app
#seaborn and matplotlib are used for visualisation
# %matplotlib inline
# %config InlineBackend.figure_format='retina'

sns.set(style='whitegrid', palette='muted', font_scale=1.2)

app_packages=[
'com.memes.plus'
]

len(app_packages)

app_infos = []
#user country as well as language you're looking for
#for loop as if you want multiple app packages
for ap in tqdm(app_packages):
  info = app(ap, lang='en', country='us')
  del info['comments']
  app_infos.append(info)

#scrapper will generate very unsystematics reviews format,so use jsonlexer from pygments package

def print_json(json_object):
  json_str = json.dumps(
    json_object, 
    indent=2, 
    sort_keys=True, 
    default=str
  )
  print(highlight(json_str, JsonLexer(), TerminalFormatter()))

print_json(app_infos[0])

def format_title(title):
  sep_index = title.find(':') if title.find(':') != -1 else title.find('-')
  if sep_index != -1:
    title = title[:sep_index]
  return title[:10]

fig, axs = plt.subplots(2, len(app_infos) // 2, figsize=(14, 5))

for i, ax in enumerate(axs.flat):
  ai = app_infos[i]
  img = plt.imread(ai['icon'])
  ax.imshow(img)
  ax.set_title(format_title(ai['title']))
  ax.axis('off')

app_infos_df=pd.DataFrame(app_infos)
app_infos_df.head()

#he app information for later by converting the JSON objects into a Pandas dataframe as to  save the result into a CSV file:

app_infos_df = pd.DataFrame(app_infos)
app_infos_df.to_csv('apps.csv', index=None, header=True)

app_reviews = []

for ap in tqdm(app_packages):
  for score in list(range(1, 6)):
    for sort_order in [Sort.RATING]:
      rvs, _ = reviews(
        ap,
        lang='en',
        country='us',
        sort=sort_order,
        count= 30000 if score == 3 else 30000,
        filter_score_with=score
      )
      for r in rvs:
        r['sortOrder'] = 'rating'
        r['appId'] = ap
      app_reviews.extend(rvs)

print_json(app_reviews[0])

len(app_reviews)

app_reviews_df = pd.DataFrame(app_reviews)
app_reviews_df.to_csv('reviews.csv', index=None, header=True)

